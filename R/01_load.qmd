---
title: "Data Loading"
author: 
  - Rune Daucke (runda, s165493)
  - David Faurdal (dalofa, s144523)
  - Luisa Weisch (s233028)
date: 12/02-2024
format:
  html:
    embed-resources: true
editor: visual
editor_options: 
  chunk_output_type: console
---

## Load Libraries

```{r}
#| label: load_libraries
#| eval: TRUE
#| echo: TRUE
#| results: hide
#| message: FALSE
#| warning: FALSE

library("tidyverse")
Sys.setenv(VROOM_CONNECTION_SIZE = "500000") #Prevent memory error
library(dplyr)

```

## Download and load data

For ease of running the data is downloaded directly from Gene Expression Omnibus and loaded.

```{r}
#| label: data_loading
#| eval: TRUE
#| echo: TRUE
#| results: hide
#| message: FALSE
#| warning: FALSE

# Download data
url <- "https://ftp.ncbi.nlm.nih.gov/geo/series/GSE72nnn/GSE72267/matrix/GSE72267_series_matrix.txt.gz"
dest_folder ="../data/_raw"
dest_path <- "../data/_raw/GSE72267_series_matrix.txt.gz"

# create destination folder if needed
if (!dir.exists(dest_folder)) {
  dir.create(dest_folder, recursive = TRUE)}

download.file(url, dest_path, mode = "wb")
```

Here, the junk headers are removed, and a clean data set is generated.

```{r}
#| label: data_wrangling
#| eval: TRUE
#| echo: TRUE
#| message: FALSE
#| warning: FALSE

# Load and wrangle data
df <- read_tsv(dest_path, comment = "!")
metadata <- readLines(dest_path)

# Remove junk headers and extract sample titles
titles <- metadata |>
  str_subset("^!Sample_title") |>
  str_split("\t", simplify = TRUE) |>
  as.vector() |>
  (\(x) x[-1])() |>  # Extract all elements except the first
  str_remove_all("\"")

# Assign new names to all columns except ID_REF
colnames(df)[-1] <- titles

# Write to a new load data table
write_tsv(df, "../data/01_dat_load.tsv")
```


This creates a copy of the html file in the results folder

```{r}
#| label: copy_to_results
#| eval: TRUE
#| echo: TRUE
#| results: hide
#| message: FALSE
#| warning: FALSE

# Define source and destination
source_file <- "01_load.html"
destination_dir <- "../results/"

# Ensure the destination directory exists
if (!dir.exists(destination_dir)) {
  dir.create(destination_dir, recursive = TRUE)
}

# Move the file
file.copy(source_file, file.path(destination_dir, source_file), overwrite = TRUE)
```
