---
title: "Load"
author: 
  - Rune Daucke 
  - David Faurdal
  - Luisa Weisch
format: html
editor: visual
---

## Importing necessary libraries 
```{r}
#| results: "hide"
library(tidyverse)
source("99_proj_func.R")
library(dplyr)

#| eval: false
#| echo: true
Sys.setenv(VROOM_CONNECTION_SIZE = "500000")

```

## Download and load data

For ease of running the data is downloaded directly from Gene Expression Omnibus and loaded.

```{r}
#| results: "hide"

# Download data
url <- "https://ftp.ncbi.nlm.nih.gov/geo/series/GSE72nnn/GSE72267/matrix/GSE72267_series_matrix.txt.gz"
dest_folder ="../data/_raw"
dest_path <- "../data/_raw/GSE72267_series_matrix.txt.gz"

# create destination folder if needed
if (!dir.exists(dest_folder)) {
  dir.create(dest_folder, recursive = TRUE)}

download.file(url, dest_path, mode = "wb")
```
Next, dataframes are created, containing the reads of specific genes for multiple samples. This dataframe will get saved as 01_dat_load.tsv for further anaylsis.
```{r}
# Load and wrangle data
df <- read_tsv(dest_path, comment = "!")
metadata <- readLines(dest_path)

# Extracting Sample_title
titles <- extract_feature("!Sample_title", metadata)

# Assign new names to all columns except ID_REF
# This replaces the accession with the sample title given in
# the "!" comment fields
colnames(df)[-1] <- titles
control_cols <- df %>% select(matches("control"))
pd_cols <- df %>% select(matches("PD"))

# Combine relevant columns 
df_bind <- bind_cols(select(df, ID_REF), control_cols, pd_cols)

```


Next, we look at the additional metadata provided in the data file, to if there is any relevant information 
```{r}
# Load Metadata
num_sample_titles <- length(titles)

# Extract all unique feature names, and filter features to include only those with matching number of entries
filtered_features <- metadata %>%
  str_extract("^!\\S+") %>%
  unique() %>% 
  keep(~ length(extract_feature(.x, metadata)) == num_sample_titles)

# Add Metadata features
# Extract metadata for filtered features
metadata_table <- map_dfc(filtered_features, ~ {
  extract_feature(.x, metadata)
}) %>%
  set_names(str_remove(filtered_features, "^!"))# Clean feature names

# Combine metadata with the main data
# df_combined <- metadata_table %>% left_join(df_wider, by = c("Sample_title" = "Sample"))

```


Since the data has nothing to do with the individuals, but instead with the with the study, there is no relevant information for the analysis. This means the the data without additional metadata will be saved as 01_dat_load.tsv.

```{r}
# write to new load data table
write_tsv(x = df_bind, file="../data/01_dat_load.tsv")

```

