---
title: "PCA Plot"
author: 
  - Rune Daucke (runda, s165493)
  - David Faurdal (dalofa, s144523)
  - Luisa Weisch (s233028)
date: 12/02-2024
format:
  html:
    embed-resources: true
editor: visual
editor_options: 
  chunk_output_type: console
---

## PCA

```{r}
#| label: load_libraries_PCA
#| eval: TRUE
#| echo: TRUE
#| results: hide
#| message: FALSE
#| warning: FALSE

library(tidyverse)
library(ggprism)

df <- read_tsv("../data/02_dat_clean.tsv")
```

```{r}
#| label: create_pca
#| eval: TRUE
#| echo: TRUE
#| results: hide
#| message: FALSE
#| warning: FALSE

df_wider <- df %>%
  pivot_wider(
    names_from = Gene,
    values_from = Expression)

# Normalize - Center data
data_scaled <- apply(df_wider[, c(3:ncol(df_wider))], 2, function(x) (x - mean(x)) / sd(x))

PCA_data <- prcomp(t(data_scaled),
                   center = TRUE,
                   scale. = TRUE) 

loadings <- prcomp(data_scaled,
                   center = TRUE,
                   scale. = TRUE) %>%
                   .$rotation

# Convert loadings to a tibble for tidyverse manipulation
loadings_tibble <- as_tibble(loadings, rownames = "Genes")

pca_data <- PCA_data$rotation %>% as.data.frame() %>%
  mutate(Condition = df_wider$Condition) 

pca_data_summary <- pca_data %>% 
  group_by(Condition) %>% 
  summarise(sd_PC1 = sd(PC1),
            PC1 = mean(PC1),
            sd_PC2 = sd(PC2),
            PC2 = mean(PC2))

# Calculate the percentage of variance explained by each PC
variance_explained <- summary(PCA_data)$importance[3, ]
PC <- numeric(length(variance_explained))

for (i in seq_along(variance_explained)) {
  if (i == 1) {
    PC[i] <- round(variance_explained[i] * 100, 2)
  } else {
    PC[i] <- round(variance_explained[i] * 100, 2) - sum(PC[1:(i - 1)])
  }
}
```

```{r}
#| label: pca_plot
#| eval: TRUE
#| echo: TRUE
#| message: FALSE
#| warning: FALSE
#| fig.width: 8
#| fig.height: 6

# Plotting the PCA
ggplot(pca_data, aes(x = PC1, y = PC2, color = Condition)) +
  geom_point(size = 3) +
  geom_pointrange(data = pca_data_summary, aes(xmin = PC1 - sd_PC1, xmax = PC1 + sd_PC1), shape = 22, size = 2) +
  geom_pointrange(data = pca_data_summary, aes(ymin = PC2 - sd_PC2, ymax = PC2 + sd_PC2), shape = 22, size = 2) +
  theme_prism(border = TRUE, base_rect_size = 2) +
  labs(x = paste("PC1 (", PC[1], "%)", sep = ""),
       y = paste("PC2 (", PC[2], "%)", sep = "")) +
theme(legend.position = "right",
        panel.background = element_rect(fill='transparent'), 
        plot.background = element_rect(fill='transparent', color=NA),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.background = element_rect(fill='transparent'),
        legend.box.background = element_rect(fill='transparent'),
        axis.title.x = element_text(size = 20),
        axis.title.y = element_text(size = 20),
        axis.text.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text = element_text(size = 20),
        plot.title = element_text(size = 20, face = "bold"),
        legend.title = element_text(size = 24),
        legend.text = element_text(size = 20),
        legend.key.size = unit(3, "lines"),
        strip.text = element_text(size = 20))

ggsave("../results/PCA_plot.png", width = 8, height = 6, dpi = 600)
```
