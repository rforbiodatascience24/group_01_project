---
title: "Data Cleaning"
author: 
  - Rune Daucke (runda, s165493)
  - David Faurdal (dalofa, s144523)
  - Luisa Weisch (s233028)
date: 12/02-2024
format:
  html:
    embed-resources: true
editor: visual
editor_options: 
  chunk_output_type: console
---

## Data mapping

The data loaded in 01_load. It is currently not in a tidy format.' The data here is further cleaned and mapped to correct gene names.

```{r}
#| label: load_libraries_clean
#| eval: TRUE
#| echo: TRUE
#| results: hide
#| message: FALSE
#| warning: FALSE

library("tidyverse")
library("annotate")
library("hgu133a2.db")

df <- read_tsv("../data/01_dat_load.tsv")
```

Here, the conditions and the genes are mapped to the data

```{r}
#| label: data_tidy_mapping
#| eval: TRUE
#| echo: TRUE
#| results: hide
#| message: FALSE
#| warning: FALSE

control_cols <- df |> 
  dplyr::select(matches("control"))
pd_cols <- df |> 
  dplyr::select(matches("PD"))

# Combine relevant columns
df <- df |> 
  dplyr::select(ID_REF) |>   
  bind_cols(control_cols, pd_cols) |> 
  filter(!str_detect(ID_REF, "AFFX")) # This removes spiked-in controls

# Reshape the data and add the conditions
df_conditon_wide <- df |> 
  pivot_longer(
    cols = -c(ID_REF),
    names_to = "Sample",
    values_to = "Expression"
  ) |> 
  pivot_wider(
    names_from = ID_REF,
    values_from = Expression
  ) |> 
  mutate(Condition = case_when(
    str_detect(Sample, "control") ~ "Control",
    TRUE ~ "PD"
  )) |> 
  dplyr::select(Sample, Condition, everything())

# Get the gene probe IDs
gene_probe_ids <- colnames(df_conditon_wide)[-c(1, 2)]

# Map probe IDs to gene names using the function from func script
source("../R/99_proj_func.R") 
gene_names <- map_probe_to_gene(gene_probe_ids)

# Replace the probe IDs with the mapped gene names in the dataframe
colnames(df_conditon_wide)[-c(1, 2)] <- gene_names

# Order the samples according to name
control_order <- paste("Blood_healthy_control_", 1:20, sep = "")
pd_order <- paste("Blood_PD_patient_", 1:41, sep = "")
all_samples <- c(control_order, pd_order)

# Reshape data to long format again and apply ordering
df_mapped_clean <- df_conditon_wide |> 
  pivot_longer(
    cols = -c(Sample, Condition),
    names_to = "Gene",
    values_to = "Expression"
  ) |> 
  mutate(
    Sample = factor(Sample, levels = all_samples))

write_tsv(x = df_mapped_clean,
          file = "../data/02_dat_clean.tsv")
```

This creates a copy of the html file in the results folder.

```{r}
#| label: copy_to_results_2
#| eval: TRUE
#| echo: TRUE
#| results: hide
#| message: FALSE
#| warning: FALSE

# Define source and destination
source_file <- "02_clean.html"
destination_dir <- "../results/"

# Ensure the destination directory exists
if (!dir.exists(destination_dir)) {
  dir.create(destination_dir, recursive = TRUE)
}

# Move the file
file.copy(source_file, file.path(destination_dir, source_file), overwrite = TRUE)
```
