---
title: "02_clean"
author: 
  - Rune Daucke 
  - David Faurdal
  - Luisa Weisch
format: html
editor: visual
---

```{r}
#| results: "hide"
if (!requireNamespace("BiocManager", quietly = TRUE)) {
    install.packages("BiocManager")
}

BiocManager::install("hgu133a2.db")

```

## Clean Data

The data loaded in 01_load and stored in "01_dat_load_tsv" is currently not in a clean format. In the following r-chunk, the dataframe undergoes several transformations, to get to "df_tidy", where each row represents a single sample. The first column contains the sample IDs, the second describes their condition (e.g., control or patient). The following columns represent the number of reads for specific genes, with each column corresponding to a gene.

```{r}
#| results: "hide"
library(tidyverse)
library(annotate)
library(hgu133a2.db)
library(dplyr)

```

```{r}
df_wide <- read_tsv("../data/01_dat_load.tsv")

# Make a tidy long format table
df_tidy <- df_wide |>
  pivot_longer(
    cols=-ID_REF,
    names_to = "Sample",
    values_to = "Expression"
  ) |>
  mutate(
    Condition = case_when(
    str_detect(Sample,"control") ~"Control",
    TRUE ~ "PD"),
    gene_name = ID_REF#getSYMBOL(ID_REF,"hgu133a2.db") # convert probe_ID to gene_name
    ) |>
  dplyr::select(-ID_REF)

df_wider <- df_tidy |>
  pivot_wider(
    names_from = gene_name,
    values_from = Expression
  )

```

```{r}
# Checking for NaNs
#df_wider %>%
 # summarise(across(where(is.numeric), ~sum(is.nan(.))))
```

# STILL SOME DUPLICATES - ID_REF PROBLEM

```{r}
# Checking for duplicates:

df_duplicates <- df_wide %>%
  group_by("ID_REF")

print(df_duplicates)

df_tidy %>%
  group_by(Sample, gene_name) %>%
  summarise(n = n(), .groups = 'drop') %>%
  filter(n > 1)

```

Looks like there are no NaN values in the dataframe, so next the data gets joined with the metadata, to see if there is any relevant information for the analysis.

```{r}
#| results: "hide"
# Add Metadata features
# Filter features to include only those with matching number of entries
filtered_features <- feature_names %>%
  keep(~ length(extract_feature(.x, metadata)) == num_sample_titles)

# Extract metadata for filtered features
metadata_table <- map_dfc(filtered_features, ~ {
  extract_feature(.x, metadata)
}) %>%
  set_names(str_remove(filtered_features, "^!"))# Clean feature names

# Combine metadata with the main data
df_combined <- metadata_table %>% left_join(df_wider, by = c("Sample_title" = "Sample"))

```

Since the data has nothing to do with the individuals, but instead with the with the study, there is no relevant information for the analysis. This means the the data without additional metadata will be saved as 02_dat_clean.tsv.

```{r}
# Saving dataframe in .tsv file
head(df_wider)
class(df_wider)
nrow(df_wider)
# write to new load data table
df_wider <- as_tibble(df_wider)
write_tsv(x = df_wider, file="../data/02_dat_clean.tsv")
```
